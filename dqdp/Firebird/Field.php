<?php

declare(strict_types = 1);

namespace dqdp\FireBird;

use dqdp\SQL\Select;

// <col_def> ::=
//     <regular_col_def>
//   | <computed_col_def>
//   | <identity_col_def>

// <regular_col_def> ::=
//   colname {<datatype> | domainname}
//   [DEFAULT {<literal> | NULL | <context_var>}]
//   [<col_constraint> ...]
//   [COLLATE collation_name]

// <computed_col_def> ::=
//   colname [{<datatype> | domainname}]
//   {COMPUTED [BY] | GENERATED ALWAYS AS} (<expression>)

// <identity_col_def> ::=
//   colname {<datatype> | domainname}
//   GENERATED BY DEFAULT AS IDENTITY [(START WITH startvalue)]
//   [<col_constraint> ...]

// <datatype> ::=
//     <scalar_datatype> | <blob_datatype> | <array_datatype>

// <scalar_datatype> ::=
//   !! See Scalar Data Types Syntax !!

// <blob_datatype> ::=
//   !! See BLOB Data Types Syntax !!

// <array_datatype> ::=
//   !! See Array Data Types Syntax !!

// <col_constraint> ::=
//   [CONSTRAINT constr_name]
//     { PRIMARY KEY [<using_index>]
//     | UNIQUE      [<using_index>]
//     | REFERENCES other_table [(colname)] [<using_index>]
//         [ON DELETE {NO ACTION | CASCADE | SET DEFAULT | SET NULL}]
//         [ON UPDATE {NO ACTION | CASCADE | SET DEFAULT | SET NULL}]
//     | CHECK (<check_condition>)
//     | NOT NULL }

// <using_index> ::= USING
//   [ASC[ENDING] | DESC[ENDING]] INDEX indexname

class Field extends FirebirdObject
{
	static function getSQL(): Select {
		// return (new Select('f.*, cs.*, c.*'))
		return (new Select())
		->From('RDB$FIELDS AS fields')
		->LeftJoin('RDB$CHARACTER_SETS AS character_sets', 'character_sets.RDB$CHARACTER_SET_ID = fields.RDB$CHARACTER_SET_ID')
		->LeftJoin('RDB$COLLATIONS AS collations', '(collations.RDB$COLLATION_ID = fields.RDB$COLLATION_ID AND collations.RDB$CHARACTER_SET_ID = fields.RDB$CHARACTER_SET_ID)')
		->Where('fields.RDB$SYSTEM_FLAG = 0')
		// ->OrderBy('f.RDB$FIELD_NAME')
		;
		// return (new Select())
		// ->From('RDB$FIELDS')
		// ->Where('RDB$SYSTEM_FLAG = 0')
		// ->OrderBy('RDB$FIELD_NAME')
		// ;
	}

	function getMetadataSQL(): Select {
		return $this->getSQL()->Where(['fields.RDB$FIELD_NAME = ?', $this->name]);
	}

	// static function isQuotable($type) {
	// 	return in_array($type, Field::$QuotableTypes);
	// }

	// protected function regular_col_def(){
	// 	$MT = $this->getMetadata();
	// 	$DBMT = $this->getDb()->getMetadata();
	// 	$FT = $MT->FIELD_TYPE;
	// }

	function ddlParts(): array {
		$MT = $this->getMetadata();

		$PARTS = ['colname'=>"$this"];

		// # Domain
		// if(!empty($MT->FIELD_SOURCE) && substr($MT->FIELD_SOURCE, 0, 4) != 'RDB$'){
		// 	$PARTS['domainname'] = $MT->FIELD_SOURCE;
		// }

		# TODO: identity_col_def
		if(empty($MT->COMPUTED_SOURCE)){
			$PARTS['col_def'] = 'regular_col_def';
		} else {
			$PARTS['col_def'] = 'computed_col_def';
			$PARTS['expression'] = $MT->COMPUTED_SOURCE;
		}

		$PARTS['datatype'] = Field\Type::datatype($MT);

		if($MT->DEFAULT_SOURCE){
			$PARTS['default'] = $MT->DEFAULT_SOURCE;
		}

		if($MT->COLLATION_NAME){
			$PARTS['collation_name'] = $MT->COLLATION_NAME;
		}

		// if(in_array($FT, [Field\Type::TEXT, Field\Type::VARYING, Field\Type::CSTRING, Field\Type::BLOB])){
		// 	if($MT->COLLATION_NAME){
		// 		$PARTS['collation_name'] = $MT->COLLATION_NAME;
		// 	}

		// 	if($MT->CHARACTER_SET_NAME){
		// 		$PARTS['charset'] = $MT->CHARACTER_SET_NAME;
		// 	}
		// }

		if($MT->NULL_FLAG){
			$PARTS['null_flag'] = true;
		}

		return $PARTS;
	}
}
